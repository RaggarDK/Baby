/*  Copyright (c) 2012 Sven "FuzzYspo0N" BergstrÃ¶m 
    
    http://underscorediscovery.com
    
    MIT Licensed. See LICENSE for full license.
    Usage : node simplest.app.js
*/

   var 
        gameport        = process.env.PORT || 4004,
        CANNON = require('cannon'),
        io              = require('socket.io'),
       socketio              = require('socket.io'),
        express         = require('express'),
        UUID            = require('node-uuid'),
        fs = require('fs'),
        gameloop = require('node-gameloop'),
        verbose         = false;



var fs = require('fs')
    , http = require('http')
    , socketio = require('socket.io');
var server = http.createServer(function(req, res) {
    res.writeHead(200, { 'Content-type': 'text/html'});
    res.end(fs.readFileSync(__dirname + '/index.html'));
}).listen(8080, function() {
    console.log('Listening at: http://localhost:8080');
});


timeStep = 1.0 / 60.0; 
moveSpeed = .1;
lastProcessedInput = -1;
socketio.listen(server).on('connection', function (socket) {
    
    socket.emit('spawnPlayer');
    var testLat = 0;
    var networkLoop = gameloop.setGameLoop(function(delta) {
        
     //socket.emit('news', { x:  sphereBody.position.x, y:  sphereBody.position.y, z:  sphereBody.position.z, last:lastProcessedInput});

    socket.emit('updatePOS', { x:  sphereBody.position.x, y:  sphereBody.position.y, z:  sphereBody.position.z, last:lastProcessedInput});
            
        
}, 1000 / 10); 
    
    
    
   
    socket.on('input', function (inp) {

        
   applyInput(inp);
     console.log(inp.input_sequence_number);   
      
    });
    sphereBody.velocity = new CANNON.Vec3(0,0,0);
    
    
  /*socket.on('arrayInput', function (ainput) {

   for (var input in ainput){
       if (ainput.input_sequence_number > lastProcessedInput){
          applyInput(ainput[input]);  
       }
       
   }
      
      
    });   
  */  
    
});


 


function applyInput(inp){
    sphereBody.velocity.x = 0;  
  
    if (inp.dir == "right"){
        sphereBody.position.x += inp.press_time*5;
        
    }
    
    if (inp.dir == "sfLeft"){
       sphereBody.position.z += inp.press_time*2.5;
     sphereBody.position.x += -inp.press_time*2.5;
        
    }
    
      if (inp.dir == "left"){
        sphereBody.position.x += -inp.press_time*5;
        
    }
    
        if (inp.dir == "forward"){
        sphereBody.position.z += inp.press_time*5;
        
    }
    
    
        if (inp.dir == "back"){
        sphereBody.position.z += -inp.press_time*5;
        
    }
    
    lastProcessedInput = inp.input_sequence_number;
        console.log(lastProcessedInput);   
    
    
}   




var initPhysics = function() {

world = new CANNON.World();
  
world.gravity.set(0,-30,0);
world.broadphase = new CANNON.NaiveBroadphase();
        
var mass = 5, radius = 1;
sphereShape = new CANNON.Sphere(radius); 
sphereBody = new CANNON.Body({mass: 1, shape: sphereShape}); 
sphereBody.position.set(0,2,2);
sphereBody.rotation = new CANNON.Vec3();    
world.add(sphereBody); 
 
sphereBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2);     

  

createHeightfield();
 
  
}
    



var frameCount = 0;
var mainLoop = gameloop.setGameLoop(function(delta) {
   
  //  console.log('Hi there! (frame=%s, delta=%s)', frameCount++, delta);
    world.step(timeStep);
   // console.log(sphereBody.position);
    if (sphereBody){
        velocity = sphereBody.velocity;      
//sphereBody.velocity.z = 0; 
      var inputVelocity = new CANNON.Vec3();    
      sphereBody.velocity.x = 0;  
        sphereBody.velocity.z = 0;  
       velocity.x = inputVelocity.x;
       velocity.z = inputVelocity.z;  
    }
}, 1000 / 60);   


        

 function createHeightfield(){
    
matrix2 = [];     
elementSize = 2.9999426007270813;     
     
     
matrix2[0] = [
 10.294134842548655,
 10.294077302543254,
 10.294019762537854,
 10.293962222532453,
 10.293904682527053,
 10.293847142521653,
 10.293789602516252,
 10.293732062510852,
 10.293674522505452,
 10.293616982500051,
 10.29355944249465,
 10.29350190248925,
 10.29344436248385,
 10.29338682247845,
 10.29332928247305,
 10.293271742467649,
 10.293214202462249,
 10.293156662456848,
 10.293099122451448,
 10.293041582446047,
 10.292984042440647
];

matrix2[1] = [
 10.294134842548655,
 10.294077302543254,
 10.294019762537854,
 10.293962222532453,
 10.293904682527053,
 10.293847142521653,
 10.293789602516252,
 10.293732062510852,
 10.293674522505452,
 10.293616982500051,
 10.29355944249465,
 10.29350190248925,
 10.29344436248385,
 10.29338682247845,
 10.29332928247305,
 10.293271742467649,
 10.293214202462249,
 10.293156662456848,
 10.293099122451448,
 10.293041582446047,
 10.292984042440647
];

matrix2[2] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[3] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[4] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[5] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 1.260629979194317,
 1.2605724391889166,
 1.2605148991835162,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[6] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 1.260629979194317,
 1.2605724391889166,
 1.2605148991835162,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];
 
matrix2[7] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 1.260629979194317,
 1.2605724391889166,
 1.2605148991835162,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];
 
matrix2[8] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];
 
matrix2[9] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 4.516292111633966,
 4.516234571628566
];

matrix2[10] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 4.516292111633966,
 4.516234571628566
];

matrix2[11] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 4.516292111633966,
 4.516234571628566
];

matrix2[12] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[13] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[14] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 7.674529389168344,
 7.674471849162944,
 7.674414309157544,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[15] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 7.674529389168344,
 7.674471849162944,
 7.674414309157544,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[16] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 7.674529389168344,
 7.674471849162944,
 7.674414309157544,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[17] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[18] = [
 10.294134842548655,
 10.294077302543254,
 4.517270291725772,
 4.517212751720372,
 4.517155211714972,
 4.517097671709571,
 4.517040131704171,
 4.5169825916987705,
 4.51692505169337,
 4.51686751168797,
 4.516809971682569,
 4.516752431677169,
 4.516694891671769,
 4.516637351666368,
 4.516579811660968,
 4.5165222716555675,
 4.516464731650167,
 4.516407191644767,
 4.516349651639366,
 10.293041582446047,
 10.292984042440647
];

matrix2[19] = [
 10.294134842548655,
 10.294077302543254,
 10.294019762537854,
 10.293962222532453,
 10.293904682527053,
 10.293847142521653,
 10.293789602516252,
 10.293732062510852,
 10.293674522505452,
 10.293616982500051,
 10.29355944249465,
 10.29350190248925,
 10.29344436248385,
 10.29338682247845,
 10.29332928247305,
 10.293271742467649,
 10.293214202462249,
 10.293156662456848,
 10.293099122451448,
 10.293041582446047,
 10.292984042440647
];

matrix2[20] = [
 10.294134842548655,
 10.294077302543254,
 10.294019762537854,
 10.293962222532453,
 10.293904682527053,
 10.293847142521653,
 10.293789602516252,
 10.293732062510852,
 10.293674522505452,
 10.293616982500051,
 10.29355944249465,
 10.29350190248925,
 10.29344436248385,
 10.29338682247845,
 10.29332928247305,
 10.293271742467649,
 10.293214202462249,
 10.293156662456848,
 10.293099122451448,
 10.293041582446047,
 10.292984042440647
];
     
     
    shape = new CANNON.Heightfield(matrix2, {
                elementSize: elementSize
            });
   
    heightBody = new CANNON.Body({mass: 0, shape: shape}); // Step 2
			heightBody.position.y = -4.5;
			heightBody.position.x = -30;
			heightBody.position.z = 30;
			heightBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2);  
			console.log(heightBody.position);
			world.add(heightBody);


 }   
  





        
        
initPhysics();

